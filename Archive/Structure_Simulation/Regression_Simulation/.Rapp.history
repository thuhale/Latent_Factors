lunch = read.csv("Lunch_Rsquare.csv")
lunch[0,]
lunch[,0]
lunch[1:2,]
lunch=lunch[,-1]
lunch[1:2,]
lunch[1:2]
hist(lunch)
lunch = read.csv("Lunch_Rsquare.csv")
hist(lunch)
summary(lunch)
lunch=read.csv("Lunch_Rsquare.csv")
lunch = lunch[,-1]
summary(lunch)
length(lunch[lunch>0.03753553])
lunch1=read.csv("Lunch_Rsquare1.csv")#
lunch1 = lunch1[,-1]#
length(lunch1[lunch1>0.0371239])
length(lunch1[lunch1>0.0])
homeless1=read.csv("Homeless_Rsquare.csv")
homeless=homeless[,-1]
homeless=read.csv("Homeless_Rsquare.csv")
homeless=homeless[,-1]
length(homeless[homeless>0.03571468])
homeless1=read.csv("Homeless_Rsquare1.csv")#
homeless1=homeless1[,-1]#
length(homeless1[homeless1>0.03571468])
length(homeless1[homeless1>0.03302692])
gender=read.csv("Gender_Rsquare.csv")
gender=gender[,-1]
length(gender[gender>0.006543204])
gender=read.csv("Gender_Rsquare.csv")#
gender=gender[,-1]#
length(gender[gender>0.006543204])
gender1=read.csv("Gender_Rsquare1.csv")#
gender1=gender1[,-1]#
length(gender1[gender1>0.009287218])
length(race[race>0.0215214])
race=read.csv("Race_Rsquare.csv")#
race=race[,-1]#
length(race[race>0.0215214])
length(race1[race1> 0.01746721])
race1=read.csv("Race_Rsquare1.csv")#
race1=race1[,-1]#
length(race1[race1> 0.01746721])
length(country[country>0.1046887])
country=read.csv("Country_Rsquare.csv")#
country=country[,-1]#
length(country[country>0.1046887])
country1=read.csv("Country_Rsquare1.csv")#
country1=country1[,-1]#
length(country1[country1>0.1046887])
language=read.csv("Language_Rsquare.csv")#
language=language[,-1]#
length(language[language>0.1046887])
country1=read.csv("Country_Rsquare1.csv")#
country1=country1[,-1]#
length(country1[country1> 0.1561849])
country=read.csv("Country_Rsquare.csv")#
country=country[,-1]#
length(country[country>0.1046887])
language=read.csv("Language_Rsquare.csv")#
language=language[,-1]#
length(language[language>0.04625235])
language1=read.csv("Language_Rsquare1.csv")#
language1=language1[,-1]#
length(language1[language1>0.05316651])
birth_country=read.csv("Birth_Country_Rsquare.csv")#
birth_country=birth_country[,-1]#
length(birth_country[birth_country>0.04625235])
birth_country=read.csv("Birth_Country_Rsquare.csv")#
birth_country=birth_country[,-1]#
length(birth_country[birth_country>0.1046887])
birth_country1=read.csv("Birth_Country_Rsquare1.csv")#
birth_country1=birth_country1[,-1]#
length(birth_country1[birth_country1>0.1561849])
parent_language=read.csv("Parent_Language_Rsquare.csv")#
parent_language=parent_language[,-1]#
length(parent_language[parent_language>0.04327742])
parent_language1=read.csv("Parent_Language_Rsquare1.csv")#
parent_language1=parent_language1[,-1]#
length(parent_language1[parent_language1>0.04866746])
lunch=read.csv("Lunch_Rsquare.csv")#
lunch = lunch[,-1]#
length(lunch[lunch>0.03753553])#
#
lunch1=read.csv("Lunch_Rsquare1.csv")#
lunch1 = lunch1[,-1]#
length(lunch1[lunch1>0.0371239])#
#
homeless=read.csv("Homeless_Rsquare.csv")#
homeless=homeless[,-1]#
length(homeless[homeless>0.03571468])#
#
homeless1=read.csv("Homeless_Rsquare1.csv")#
homeless1=homeless1[,-1]#
length(homeless1[homeless1>0.03302692])#
gender=read.csv("Gender_Rsquare.csv")#
gender=gender[,-1]#
length(gender[gender>0.006543204])#
#
gender1=read.csv("Gender_Rsquare1.csv")#
gender1=gender1[,-1]#
length(gender1[gender1>0.009287218])#
#
race=read.csv("Race_Rsquare.csv")#
race=race[,-1]#
length(race[race>0.0215214])#
#
race1=read.csv("Race_Rsquare1.csv")#
race1=race1[,-1]#
length(race1[race1> 0.01746721])#
#
country=read.csv("Country_Rsquare.csv")#
country=country[,-1]#
length(country[country>0.1046887])#
#
country1=read.csv("Country_Rsquare1.csv")#
country1=country1[,-1]#
length(country1[country1> 0.1561849])#
#
language=read.csv("Language_Rsquare.csv")#
language=language[,-1]#
length(language[language>0.04625235])#
#
language1=read.csv("Language_Rsquare1.csv")#
language1=language1[,-1]#
length(language1[language1>0.05316651])#
#
birth_country=read.csv("Birth_Country_Rsquare.csv")#
birth_country=birth_country[,-1]#
length(birth_country[birth_country>0.1046887])#
#
birth_country1=read.csv("Birth_Country_Rsquare1.csv")#
birth_country1=birth_country1[,-1]#
length(birth_country1[birth_country1>0.1561849])#
#
parent_language=read.csv("Parent_Language_Rsquare.csv")#
parent_language=parent_language[,-1]#
length(parent_language[parent_language>0.04327742])#
#
parent_language1=read.csv("Parent_Language_Rsquare1.csv")#
parent_language1=parent_language1[,-1]#
length(parent_language1[parent_language1>0.04866746])
## Structure simulation using a rank-3 matrix, lambda = 590, lambda1=550, normalize by minus x#
#resample#
#
rm(list=ls())#
library(truncnorm)#
library(XLConnect)#
#
x = read.csv("math.csv")#
x = data.frame(x)#
x=x[,-1]#
x=as.matrix(x)#
# basic graph properties:#
dim(x)#
table(rowSums(!is.na(x)))#
table(colSums(!is.na(x)))#
mean(rowSums(!is.na(x)))#
mean(colSums(!is.na(x)))#
#Drop student with 1 entry#
B = (!is.na(x))#
badstu = which(rowSums(B) < 2)#
badtea = which(colSums(B) < 2)#
G = x[-badstu, ]#
G = G[,-badtea]#
B = B[-badstu,]#
B = B[,-badtea]#
dim(G)
wb2<- loadWorkbook("MATH.xlsx")#
Tables2 <- readWorksheet(wb2, sheet = getSheets(wb2))#
Year = Tables2$"Year"#
Year=Year[,-1]#
Pre_k = Tables2$"Pre-k"#
#
age = matrix(,nrow=1870, ncol=74)#
for (i in 1:1870){#
	student_age = Pre_k$unique.student_birth_year[i]#
	for (j in 1:74){#
		age[i,j]= Year[i,j]-student_age#
	}#
}#
#
teacher_grade = c(1:74)#
for (j in 1:74){#
	student_age = age[,j]#
	teacher_grade[j] = mean(student_age[!is.na(student_age)])#
}#
teacher_grade_Rsquare = c(1:100)#
teacher_grade_Rsquare1 = c(1:100)
W = matrix(rtruncnorm(91872, a=100, b = 500, mean = mu, sd = sigma), 1276, 72)#
	W[is.na(G)]=NA    #
	new_lam = 870#
	new_tmp = W#
	new_obs = W[!is.na(W)]#
	new_tmp[is.na(W)] = mu#
#
	for( i in 1:5000){#
  	new_s = svd(new_tmp)#
  	new_s$d = thresh(new_s$d, new_lam)#
  	new_low = new_s$u%*%diag(new_s$d)%*%t(new_s$v)#
  	new_tmp[is.na(W)] = new_low[is.na(W)]#
	}#
	Wnorm=W#
	x=mean(new_tmp)#
    y=rowMeans(new_tmp)#
	w=colMeans(new_tmp)#
#
	for(j in 1:1276){#
	Wnorm[j,]=Wnorm[j,]-y[j]#
	}#
	for(k in 1:72){#
	Wnorm[,k]=Wnorm[,k]-w[k]#
	}#
	Wnorm=Wnorm+x#
#
	new_lam1=850#
	new_tmp1 = Wnorm#
	new_obs1 = Wnorm[!is.na(Wnorm)]#
	new_tmp1[is.na(Wnorm)] = mean(Wnorm[!is.na(Wnorm)])#
#
	for( h in 1:5000){#
 	 	new_s1 = svd(new_tmp1)#
  		new_s1$d = thresh(new_s1$d, new_lam1)#
  		new_low1 = new_s1$u%*%diag(new_s1$d)%*%t(new_s1$v)#
  		new_tmp1[is.na(Wnorm)] = new_low1[is.na(Wnorm)]#
	}#
	lm1= lm(cbind(teacher_grade[-badtea]~new_s$u[,1:3])#
	lm2= lm(cbind(teacher_grade[-badtea]~new_s1$u[,1:3])
thresh = function(a, lam){#
	a = a - lam#
	a[a<0] = 0#
	return(a)#
}#
##Generate random matrix#
K = as.list(G)#
K=K[!is.na(K)]#
K=as.numeric(K)#
mu = mean(K)#
sigma = sd(K)
W = matrix(rtruncnorm(91872, a=100, b = 500, mean = mu, sd = sigma), 1276, 72)#
	W[is.na(G)]=NA    #
	new_lam = 870#
	new_tmp = W#
	new_obs = W[!is.na(W)]#
	new_tmp[is.na(W)] = mu#
#
	for( i in 1:5000){#
  	new_s = svd(new_tmp)#
  	new_s$d = thresh(new_s$d, new_lam)#
  	new_low = new_s$u%*%diag(new_s$d)%*%t(new_s$v)#
  	new_tmp[is.na(W)] = new_low[is.na(W)]#
	}#
	Wnorm=W#
	x=mean(new_tmp)#
    y=rowMeans(new_tmp)#
	w=colMeans(new_tmp)#
#
	for(j in 1:1276){#
	Wnorm[j,]=Wnorm[j,]-y[j]#
	}#
	for(k in 1:72){#
	Wnorm[,k]=Wnorm[,k]-w[k]#
	}#
	Wnorm=Wnorm+x#
#
	new_lam1=850#
	new_tmp1 = Wnorm#
	new_obs1 = Wnorm[!is.na(Wnorm)]#
	new_tmp1[is.na(Wnorm)] = mean(Wnorm[!is.na(Wnorm)])#
#
	for( h in 1:5000){#
 	 	new_s1 = svd(new_tmp1)#
  		new_s1$d = thresh(new_s1$d, new_lam1)#
  		new_low1 = new_s1$u%*%diag(new_s1$d)%*%t(new_s1$v)#
  		new_tmp1[is.na(Wnorm)] = new_low1[is.na(Wnorm)]#
	}#
	lm1= lm(cbind(teacher_grade[-badtea]~new_s$u[,1:3])#
	lm2= lm(cbind(teacher_grade[-badtea]~new_s1$u[,1:3])
lm1= lm(teacher_grade[-badtea]~new_s$u[,1:3])#
	lm2= lm(teacher_grade[-badtea]~new_s1$u[,1:3])
lm1= lm(teacher_grade[-badtea]~new_s$v[,1:3])#
	lm2= lm(teacher_grade[-badtea]~new_s1$v[,1:3])
summary(lm1)
summary(lm2)
## Structure simulation using a rank-3 matrix, lambda = 590, lambda1=550, normalize by minus x#
#resample#
#
rm(list=ls())#
library(truncnorm)#
library(XLConnect)#
#
x = read.csv("math.csv")#
x = data.frame(x)#
x=x[,-1]#
x=as.matrix(x)#
# basic graph properties:#
dim(x)#
table(rowSums(!is.na(x)))#
table(colSums(!is.na(x)))#
mean(rowSums(!is.na(x)))#
mean(colSums(!is.na(x)))#
#Drop student with 1 entry#
B = (!is.na(x))#
badstu = which(rowSums(B) < 2)#
badtea = which(colSums(B) < 2)#
G = x[-badstu, ]#
G = G[,-badtea]#
B = B[-badstu,]#
B = B[,-badtea]#
dim(G)#
#
wb2<- loadWorkbook("MATH.xlsx")#
Tables2 <- readWorksheet(wb2, sheet = getSheets(wb2))#
Year = Tables2$"Year"#
Year=Year[,-1]#
Pre_k = Tables2$"Pre-k"#
#
age = matrix(,nrow=1870, ncol=74)#
for (i in 1:1870){#
	student_age = Pre_k$unique.student_birth_year[i]#
	for (j in 1:74){#
		age[i,j]= Year[i,j]-student_age#
	}#
}#
#
teacher_grade = c(1:74)#
for (j in 1:74){#
	student_age = age[,j]#
	teacher_grade[j] = mean(student_age[!is.na(student_age)])#
}#
teacher_grade_Rsquare = c(1:100)#
teacher_grade_Rsquare1 = c(1:100)#
#
thresh = function(a, lam){#
	a = a - lam#
	a[a<0] = 0#
	return(a)#
}#
##Generate random matrix#
K = as.list(G)#
K=K[!is.na(K)]#
K=as.numeric(K)#
mu = mean(K)#
sigma = sd(K)
W = matrix(rtruncnorm(91872, a=100, b = 500, mean = mu, sd = sigma), 1276, 72)#
	W[is.na(G)]=NA    #
	new_lam = 870#
	new_tmp = W#
	new_obs = W[!is.na(W)]#
	new_tmp[is.na(W)] = mu#
#
	for( i in 1:5000){#
  	new_s = svd(new_tmp)#
  	new_s$d = thresh(new_s$d, new_lam)#
  	new_low = new_s$u%*%diag(new_s$d)%*%t(new_s$v)#
  	new_tmp[is.na(W)] = new_low[is.na(W)]#
	}#
	Wnorm=W#
	x=mean(new_tmp)#
    y=rowMeans(new_tmp)#
	w=colMeans(new_tmp)#
#
	for(j in 1:1276){#
	Wnorm[j,]=Wnorm[j,]-y[j]#
	}#
	for(k in 1:72){#
	Wnorm[,k]=Wnorm[,k]-w[k]#
	}#
	Wnorm=Wnorm+x#
#
	new_lam1=850#
	new_tmp1 = Wnorm#
	new_obs1 = Wnorm[!is.na(Wnorm)]#
	new_tmp1[is.na(Wnorm)] = mean(Wnorm[!is.na(Wnorm)])#
#
	for( h in 1:5000){#
 	 	new_s1 = svd(new_tmp1)#
  		new_s1$d = thresh(new_s1$d, new_lam1)#
  		new_low1 = new_s1$u%*%diag(new_s1$d)%*%t(new_s1$v)#
  		new_tmp1[is.na(Wnorm)] = new_low1[is.na(Wnorm)]#
	}#
	lm1= lm(teacher_grade[-badtea]~new_s$v[,1:3])#
	lm2= lm(teacher_grade[-badtea]~new_s1$v[,1:3])#
	teacher_grade_Rsquare[l]=summary(lm1)$r.squared#
	teacher_grade_Rsquare1[l]=summary(lm2)$r.squared
ummary(lm1)$r.squared
summary(lm1)$r.squared
summary(lm2)$r.squared
